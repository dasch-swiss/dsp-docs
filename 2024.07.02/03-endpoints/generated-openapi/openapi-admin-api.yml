openapi: 3.1.0
info:
  title: webapi-admin-api
  version: v30.18.2
servers:
- url: http://localhost:3333
  description: Local development server
- url: https://api.dasch.swiss
  description: Production server
paths:
  /admin/groups:
    get:
      tags:
      - Admin Groups
      description: Return all groups.
      operationId: getAdminGroups
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupsGetResponseADM'
              example:
                groups:
                - id: http://rdfh.ch/groups/0042/a95UWs71KUklnFOe1rcw1w
                  name: NewGroup
                  descriptions:
                  - value: NewGroup description in English
                    language: en
                  - value: NewGroup Beschreibung auf Deutsch
                    language: de
                  project:
                    id: http://rdfh.ch/projects/0042
                    shortname: example
                    shortcode: '0001'
                    longname: Example Project
                    description:
                    - value: An example project
                      language: en
                    keywords:
                    - example
                    - project
                    ontologies: []
                    status: true
                    selfjoin: false
                  status: true
                  selfjoin: false
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/GravsearchException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
    post:
      tags:
      - Admin Groups
      description: '**Required permissions**: User must SystemAdmin or ProjectAdmin
        of the project the group is created in.'
      operationId: Create new group
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMFZWG2BOON3WS43THI2DIMY9
        in: cookie
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupCreateRequest'
            example:
              name: NewGroup
              descriptions:
              - value: NewGroup description in English
                language: en
              - value: NewGroup Beschreibung auf Deutsch
                language: de
              project: http://rdfh.ch/projects/0042
              status: true
              selfjoin: false
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupGetResponseADM'
              example:
                group:
                  id: http://rdfh.ch/groups/0042/a95UWs71KUklnFOe1rcw1w
                  name: NewGroup
                  descriptions:
                  - value: NewGroup description in English
                    language: en
                  - value: NewGroup Beschreibung auf Deutsch
                    language: de
                  project:
                    id: http://rdfh.ch/projects/0042
                    shortname: example
                    shortcode: '0001'
                    longname: Example Project
                    description:
                    - value: An example project
                      language: en
                    keywords:
                    - example
                    - project
                    ontologies: []
                    status: true
                    selfjoin: false
                  status: true
                  selfjoin: false
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/GravsearchException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/groups/{groupIri}:
    get:
      tags:
      - Admin Groups
      description: Return a single group identified by its IRI.
      operationId: getAdminGroupsGroupiri
      parameters:
      - name: groupIri
        in: path
        description: The IRI of a group. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/groups/0042/a95UWs71KUklnFOe1rcw1w
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupGetResponseADM'
              example:
                group:
                  id: http://rdfh.ch/groups/0042/a95UWs71KUklnFOe1rcw1w
                  name: NewGroup
                  descriptions:
                  - value: NewGroup description in English
                    language: en
                  - value: NewGroup Beschreibung auf Deutsch
                    language: de
                  project:
                    id: http://rdfh.ch/projects/0042
                    shortname: example
                    shortcode: '0001'
                    longname: Example Project
                    description:
                    - value: An example project
                      language: en
                    keywords:
                    - example
                    - project
                    ontologies: []
                    status: true
                    selfjoin: false
                  status: true
                  selfjoin: false
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/GravsearchException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
    put:
      tags:
      - Admin Groups
      description: Update a group's basic information.
      operationId: putAdminGroupsGroupiri
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMFZWG2BOON3WS43THI2DIMY9
        in: cookie
        required: false
        schema:
          type: string
      - name: groupIri
        in: path
        description: The IRI of a group. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/groups/0042/a95UWs71KUklnFOe1rcw1w
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupUpdateRequest'
            example:
              name: NewGroupNewName
              descriptions:
              - value: NewGroupNewName description in English
                language: en
              - value: NewGroupNewName Beschreibung auf Deutsch
                language: de
              status: false
              selfjoin: true
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupGetResponseADM'
              example:
                group:
                  id: http://rdfh.ch/groups/0042/a95UWs71KUklnFOe1rcw1w
                  name: NewGroup
                  descriptions:
                  - value: NewGroup description in English
                    language: en
                  - value: NewGroup Beschreibung auf Deutsch
                    language: de
                  project:
                    id: http://rdfh.ch/projects/0042
                    shortname: example
                    shortcode: '0001'
                    longname: Example Project
                    description:
                    - value: An example project
                      language: en
                    keywords:
                    - example
                    - project
                    ontologies: []
                    status: true
                    selfjoin: false
                  status: true
                  selfjoin: false
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/GravsearchException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
    delete:
      tags:
      - Admin Groups
      description: Deletes a group by changing its status to 'false'.
      operationId: deleteAdminGroupsGroupiri
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMFZWG2BOON3WS43THI2DIMY9
        in: cookie
        required: false
        schema:
          type: string
      - name: groupIri
        in: path
        description: The IRI of a group. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/groups/0042/a95UWs71KUklnFOe1rcw1w
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupGetResponseADM'
              example:
                group:
                  id: http://rdfh.ch/groups/0042/a95UWs71KUklnFOe1rcw1w
                  name: NewGroup
                  descriptions:
                  - value: NewGroup description in English
                    language: en
                  - value: NewGroup Beschreibung auf Deutsch
                    language: de
                  project:
                    id: http://rdfh.ch/projects/0042
                    shortname: example
                    shortcode: '0001'
                    longname: Example Project
                    description:
                    - value: An example project
                      language: en
                    keywords:
                    - example
                    - project
                    ontologies: []
                    status: true
                    selfjoin: false
                  status: true
                  selfjoin: false
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/GravsearchException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/groups/{groupIri}/members:
    get:
      tags:
      - Admin Groups
      description: Return all members of a single group.
      operationId: getAdminGroupsGroupiriMembers
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMFZWG2BOON3WS43THI2DIMY9
        in: cookie
        required: false
        schema:
          type: string
      - name: groupIri
        in: path
        description: The IRI of a group. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/groups/0042/a95UWs71KUklnFOe1rcw1w
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupMembersGetResponseADM'
              example:
                members:
                - id: http://rdfh.ch/users/0001
                  username: username
                  email: user@exampl.com
                  givenName: Jane
                  familyName: Doe
                  status: true
                  lang: rm
                  groups:
                  - id: http://rdfh.ch/groups/0042/a95UWs71KUklnFOe1rcw1w
                    name: NewGroup
                    descriptions:
                    - value: NewGroup description in English
                      language: en
                    - value: NewGroup Beschreibung auf Deutsch
                      language: de
                    project:
                      id: http://rdfh.ch/projects/0042
                      shortname: example
                      shortcode: '0001'
                      longname: Example Project
                      description:
                      - value: An example project
                        language: en
                      keywords:
                      - example
                      - project
                      ontologies: []
                      status: true
                      selfjoin: false
                    status: true
                    selfjoin: false
                  projects:
                  - id: http://rdfh.ch/projects/0042
                    shortname: example
                    shortcode: '0001'
                    longname: Example Project
                    description:
                    - value: An example project
                      language: en
                    keywords:
                    - example
                    - project
                    ontologies: []
                    status: true
                    selfjoin: false
                  permissions:
                    groupsPerProject: {}
                    administrativePermissionsPerProject: {}
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/GravsearchException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/groups/{groupIri}/status:
    put:
      tags:
      - Admin Groups
      description: Updates a group's status.
      operationId: putAdminGroupsGroupiriStatus
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMFZWG2BOON3WS43THI2DIMY9
        in: cookie
        required: false
        schema:
          type: string
      - name: groupIri
        in: path
        description: The IRI of a group. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/groups/0042/a95UWs71KUklnFOe1rcw1w
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupStatusUpdateRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupGetResponseADM'
              example:
                group:
                  id: http://rdfh.ch/groups/0042/a95UWs71KUklnFOe1rcw1w
                  name: NewGroup
                  descriptions:
                  - value: NewGroup description in English
                    language: en
                  - value: NewGroup Beschreibung auf Deutsch
                    language: de
                  project:
                    id: http://rdfh.ch/projects/0042
                    shortname: example
                    shortcode: '0001'
                    longname: Example Project
                    description:
                    - value: An example project
                      language: en
                    keywords:
                    - example
                    - project
                    ontologies: []
                    status: true
                    selfjoin: false
                  status: true
                  selfjoin: false
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/GravsearchException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/lists:
    get:
      tags:
      - Admin Lists
      description: Get all lists or all lists belonging to a project.
      operationId: getAdminLists
      parameters:
      - name: projectIri
        in: query
        description: The (optional) IRI of the project.
        required: false
        schema:
          type: string
        example: http://rdfh.ch/projects/0042
      responses:
        '200':
          description: Contains the list of all root nodes of each found list.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListsGetResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/GravsearchException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
    post:
      tags:
      - Admin Lists
      operationId: postAdminLists
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMFZWG2BOON3WS43THI2DIMY9
        in: cookie
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListCreateRootNodeRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListGetResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/GravsearchException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/lists/{p1}/name:
    put:
      tags:
      - Admin Lists
      operationId: putAdminListsP1Name
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMFZWG2BOON3WS43THI2DIMY9
        in: cookie
        required: false
        schema:
          type: string
      - name: p1
        in: path
        description: The IRI of the list.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListChangeNameRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeInfoGetResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/GravsearchException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/lists/{p1}/labels:
    put:
      tags:
      - Admin Lists
      operationId: putAdminListsP1Labels
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMFZWG2BOON3WS43THI2DIMY9
        in: cookie
        required: false
        schema:
          type: string
      - name: p1
        in: path
        description: The IRI of the list.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListChangeLabelsRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeInfoGetResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/GravsearchException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/lists/{p1}/comments:
    put:
      tags:
      - Admin Lists
      operationId: putAdminListsP1Comments
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMFZWG2BOON3WS43THI2DIMY9
        in: cookie
        required: false
        schema:
          type: string
      - name: p1
        in: path
        description: The IRI of the list.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListChangeCommentsRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeInfoGetResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/GravsearchException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/lists/{p1}/position:
    put:
      tags:
      - Admin Lists
      operationId: putAdminListsP1Position
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMFZWG2BOON3WS43THI2DIMY9
        in: cookie
        required: false
        schema:
          type: string
      - name: p1
        in: path
        description: The IRI of the list.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListChangePositionRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodePositionChangeResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/GravsearchException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/lists/{p1}:
    get:
      tags:
      - Admin Lists
      description: Returns a list node, root or child, with children (if exist).
      operationId: getAdminListsP1
      parameters:
      - name: p1
        in: path
        description: The IRI of the list.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListItemGetResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/GravsearchException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
    put:
      tags:
      - Admin Lists
      operationId: putAdminListsP1
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMFZWG2BOON3WS43THI2DIMY9
        in: cookie
        required: false
        schema:
          type: string
      - name: p1
        in: path
        description: The IRI of the list.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListChangeRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeInfoGetResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/GravsearchException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
    delete:
      tags:
      - Admin Lists
      operationId: deleteAdminListsP1
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMFZWG2BOON3WS43THI2DIMY9
        in: cookie
        required: false
        schema:
          type: string
      - name: p1
        in: path
        description: The IRI of the list.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListItemDeleteResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/GravsearchException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/lists/comments/{p1}:
    delete:
      tags:
      - Admin Lists
      operationId: deleteAdminListsCommentsP1
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMFZWG2BOON3WS43THI2DIMY9
        in: cookie
        required: false
        schema:
          type: string
      - name: p1
        in: path
        description: The IRI of the list.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListNodeCommentsDeleteResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/GravsearchException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/lists/{p1}/info:
    get:
      tags:
      - Admin Lists
      description: Returns basic information about a list node, root or child, w/o
        children (if exist).
      operationId: getAdminListsP1Info
      parameters:
      - name: p1
        in: path
        description: The IRI of the list.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeInfoGetResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/GravsearchException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
  /admin/lists/candelete/{p1}:
    get:
      tags:
      - Admin Lists
      description: Checks if a list can be deleted (none of its nodes is used in data).
      operationId: getAdminListsCandeleteP1
      parameters:
      - name: p1
        in: path
        description: The IRI of the list.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CanDeleteListResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/GravsearchException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
  /admin/maintenance/{action-name}:
    post:
      tags:
      - Admin Maintenance
      operationId: postAdminMaintenanceAction-name
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMFZWG2BOON3WS43THI2DIMY9
        in: cookie
        required: false
        schema:
          type: string
      - name: action-name
        in: path
        description: |
          The name of the maintenance action to be executed.
          Maintenance actions are executed asynchronously in the background.
        required: true
        schema:
          type: string
        example: fix-top-left
      requestBody:
        description: |
          The optional parameters as json for the maintenance action.
          May be required by certain actions.
        content:
          application/json:
            schema:
              type: string
        required: false
      responses:
        '202':
          description: ''
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/GravsearchException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/permissions/ap:
    post:
      tags:
      - Admin Permissions
      description: Create a new administrative permission
      operationId: postAdminPermissionsAp
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMFZWG2BOON3WS43THI2DIMY9
        in: cookie
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAdministrativePermissionAPIRequestADM'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdministrativePermissionCreateResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/GravsearchException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/permissions/ap/{projectIri}:
    get:
      tags:
      - Admin Permissions
      description: Get all administrative permissions for a project.
      operationId: getAdminPermissionsApProjectiri
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMFZWG2BOON3WS43THI2DIMY9
        in: cookie
        required: false
        schema:
          type: string
      - name: projectIri
        in: path
        description: The IRI of a project. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/projects/0001
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdministrativePermissionsForProjectGetResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/GravsearchException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/permissions/ap/{projectIri}/{groupIri}:
    get:
      tags:
      - Admin Permissions
      description: Get all administrative permissions for a project and a group.
      operationId: getAdminPermissionsApProjectiriGroupiri
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMFZWG2BOON3WS43THI2DIMY9
        in: cookie
        required: false
        schema:
          type: string
      - name: projectIri
        in: path
        description: The IRI of a project. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/projects/0001
      - name: groupIri
        in: path
        description: The IRI of a group. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/groups/0042/a95UWs71KUklnFOe1rcw1w
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdministrativePermissionGetResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/GravsearchException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/permissions/doap/{projectIri}:
    get:
      tags:
      - Admin Permissions
      description: Get all default object access permissions for a project.
      operationId: getAdminPermissionsDoapProjectiri
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMFZWG2BOON3WS43THI2DIMY9
        in: cookie
        required: false
        schema:
          type: string
      - name: projectIri
        in: path
        description: The IRI of a project. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/projects/0001
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultObjectAccessPermissionsForProjectGetResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/GravsearchException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/permissions/{projectIri}:
    get:
      tags:
      - Admin Permissions
      description: Get all permissions for a project.
      operationId: getAdminPermissionsProjectiri
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMFZWG2BOON3WS43THI2DIMY9
        in: cookie
        required: false
        schema:
          type: string
      - name: projectIri
        in: path
        description: The IRI of a project. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/projects/0001
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PermissionsForProjectGetResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/GravsearchException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/permissions/{permissionIri}:
    delete:
      tags:
      - Admin Permissions
      description: Delete an permission.
      operationId: deleteAdminPermissionsPermissioniri
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMFZWG2BOON3WS43THI2DIMY9
        in: cookie
        required: false
        schema:
          type: string
      - name: permissionIri
        in: path
        description: The IRI of a permission. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/permissions/00FF/Mck2xJDjQ_Oimi_9z4aFaA
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PermissionDeleteResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/GravsearchException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/permissions/doap:
    post:
      tags:
      - Admin Permissions
      description: Create a new default object access permission
      operationId: postAdminPermissionsDoap
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMFZWG2BOON3WS43THI2DIMY9
        in: cookie
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDefaultObjectAccessPermissionAPIRequestADM'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultObjectAccessPermissionCreateResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/GravsearchException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/permissions/{permissionIri}/group:
    put:
      tags:
      - Admin Permissions
      description: Update a permission's group
      operationId: putAdminPermissionsPermissioniriGroup
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMFZWG2BOON3WS43THI2DIMY9
        in: cookie
        required: false
        schema:
          type: string
      - name: permissionIri
        in: path
        description: The IRI of a permission. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/permissions/00FF/Mck2xJDjQ_Oimi_9z4aFaA
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePermissionGroupApiRequestADM'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PermissionGetResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/GravsearchException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/permissions/{permissionIri}/hasPermissions:
    put:
      tags:
      - Admin Permissions
      description: Update a permission's set of hasPermissions
      operationId: putAdminPermissionsPermissioniriHaspermissions
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMFZWG2BOON3WS43THI2DIMY9
        in: cookie
        required: false
        schema:
          type: string
      - name: permissionIri
        in: path
        description: The IRI of a permission. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/permissions/00FF/Mck2xJDjQ_Oimi_9z4aFaA
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePermissionHasPermissionsApiRequestADM'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PermissionGetResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/GravsearchException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/permissions/{permissionIri}/resourceClass:
    put:
      tags:
      - Admin Permissions
      description: Update a permission's resource class
      operationId: putAdminPermissionsPermissioniriResourceclass
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMFZWG2BOON3WS43THI2DIMY9
        in: cookie
        required: false
        schema:
          type: string
      - name: permissionIri
        in: path
        description: The IRI of a permission. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/permissions/00FF/Mck2xJDjQ_Oimi_9z4aFaA
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePermissionResourceClassApiRequestADM'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PermissionGetResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/GravsearchException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/permissions/{permissionIri}/property:
    put:
      tags:
      - Admin Permissions
      description: Update a permission's property
      operationId: putAdminPermissionsPermissioniriProperty
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMFZWG2BOON3WS43THI2DIMY9
        in: cookie
        required: false
        schema:
          type: string
      - name: permissionIri
        in: path
        description: The IRI of a permission. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/permissions/00FF/Mck2xJDjQ_Oimi_9z4aFaA
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePermissionPropertyApiRequestADM'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PermissionGetResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/GravsearchException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/projects:
    get:
      tags:
      - Admin Projects
      description: Returns all projects.
      operationId: getAdminProjects
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectsGetResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/GravsearchException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
    post:
      tags:
      - Admin Projects
      description: Creates a new project.
      operationId: postAdminProjects
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMFZWG2BOON3WS43THI2DIMY9
        in: cookie
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectCreateRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectOperationResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/GravsearchException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/projects/iri/{projectIri}:
    get:
      tags:
      - Admin Projects
      description: Returns a single project identified by the IRI.
      operationId: getAdminProjectsIriProjectiri
      parameters:
      - name: projectIri
        in: path
        description: The IRI of a project. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/projects/0001
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectGetResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/GravsearchException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
    put:
      tags:
      - Admin Projects
      description: Updates a project identified by the IRI.
      operationId: putAdminProjectsIriProjectiri
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMFZWG2BOON3WS43THI2DIMY9
        in: cookie
        required: false
        schema:
          type: string
      - name: projectIri
        in: path
        description: The IRI of a project. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/projects/0001
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectUpdateRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectOperationResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/GravsearchException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
    delete:
      tags:
      - Admin Projects
      description: Deletes a project identified by the IRI.
      operationId: deleteAdminProjectsIriProjectiri
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMFZWG2BOON3WS43THI2DIMY9
        in: cookie
        required: false
        schema:
          type: string
      - name: projectIri
        in: path
        description: The IRI of a project. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/projects/0001
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectOperationResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/GravsearchException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/projects/iri/{projectIri}/RestrictedViewSettings:
    get:
      tags:
      - Admin Projects
      description: Returns the project's restricted view settings identified by the
        IRI.
      operationId: getAdminProjectsIriProjectiriRestrictedviewsettings
      parameters:
      - name: projectIri
        in: path
        description: The IRI of a project. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/projects/0001
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectRestrictedViewSettingsGetResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/GravsearchException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
    post:
      tags:
      - Admin Projects
      description: Sets the project's restricted view settings identified by the IRI.
      operationId: postAdminProjectsIriProjectiriRestrictedviewsettings
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMFZWG2BOON3WS43THI2DIMY9
        in: cookie
        required: false
        schema:
          type: string
      - name: projectIri
        in: path
        description: The IRI of a project. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/projects/0001
      requestBody:
        description: |-
          Set how all still image resources of a projects should be displayed when viewed as restricted.
          This can be either a size restriction or a watermark.
          For that, we support two of the (IIIF size)[https://iiif.io/api/image/3.0/#42-size] forms:
          * `!d,d` The returned image is scaled so that the width and height of the returned image are not greater than d, while maintaining the aspect ratio.
          * `pct:n` The width and height of the returned image is scaled to n percent of the width and height of the original image. 1<= n <= 100.

          If the watermark is set to `true`, the returned image will be watermarked, otherwise the default size !128,128 is set.

          It is only possible to set either the size or the watermark, not both at the same time.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetRestrictedViewRequest'
            example:
              size: '!128,128'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestrictedViewResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/GravsearchException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/projects/shortcode/{projectShortcode}:
    get:
      tags:
      - Admin Projects
      description: Returns a single project identified by the shortcode.
      operationId: getAdminProjectsShortcodeProjectshortcode
      parameters:
      - name: projectShortcode
        in: path
        description: The shortcode of a project. Must be a 4 digit hexadecimal String.
        required: true
        schema:
          type: string
        example: '0001'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectGetResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/GravsearchException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
  /admin/projects/shortcode/{projectShortcode}/RestrictedViewSettings:
    get:
      tags:
      - Admin Projects
      description: Returns the project's restricted view settings identified by the
        shortcode.
      operationId: getAdminProjectsShortcodeProjectshortcodeRestrictedviewsettings
      parameters:
      - name: projectShortcode
        in: path
        description: The shortcode of a project. Must be a 4 digit hexadecimal String.
        required: true
        schema:
          type: string
        example: '0001'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectRestrictedViewSettingsGetResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/GravsearchException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
    post:
      tags:
      - Admin Projects
      description: Sets the project's restricted view settings identified by the shortcode.
      operationId: postAdminProjectsShortcodeProjectshortcodeRestrictedviewsettings
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMFZWG2BOON3WS43THI2DIMY9
        in: cookie
        required: false
        schema:
          type: string
      - name: projectShortcode
        in: path
        description: The shortcode of a project. Must be a 4 digit hexadecimal String.
        required: true
        schema:
          type: string
        example: '0001'
      requestBody:
        description: |-
          Set how all still image resources of a projects should be displayed when viewed as restricted.
          This can be either a size restriction or a watermark.
          For that, we support two of the (IIIF size)[https://iiif.io/api/image/3.0/#42-size] forms:
          * `!d,d` The returned image is scaled so that the width and height of the returned image are not greater than d, while maintaining the aspect ratio.
          * `pct:n` The width and height of the returned image is scaled to n percent of the width and height of the original image. 1<= n <= 100.

          If the watermark is set to `true`, the returned image will be watermarked, otherwise the default size !128,128 is set.

          It is only possible to set either the size or the watermark, not both at the same time.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetRestrictedViewRequest'
            example:
              size: '!128,128'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestrictedViewResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/GravsearchException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/projects/shortname/{projectShortname}:
    get:
      tags:
      - Admin Projects
      description: Returns a single project identified by the shortname.
      operationId: getAdminProjectsShortnameProjectshortname
      parameters:
      - name: projectShortname
        in: path
        description: The shortname of a project.
        required: true
        schema:
          type: string
        example: someShortname
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectGetResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/GravsearchException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
  /admin/projects/shortname/{projectShortname}/RestrictedViewSettings:
    get:
      tags:
      - Admin Projects
      description: Returns the project's restricted view settings identified by the
        shortname.
      operationId: getAdminProjectsShortnameProjectshortnameRestrictedviewsettings
      parameters:
      - name: projectShortname
        in: path
        description: The shortname of a project.
        required: true
        schema:
          type: string
        example: someShortname
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectRestrictedViewSettingsGetResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/GravsearchException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
  /admin/projects/Keywords:
    get:
      tags:
      - Admin Projects
      description: Returns all unique keywords for all projects as a list.
      operationId: getAdminProjectsKeywords
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectsKeywordsGetResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/GravsearchException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
  /admin/projects/iri/{projectIri}/Keywords:
    get:
      tags:
      - Admin Projects
      description: Returns all keywords for a single project.
      operationId: getAdminProjectsIriProjectiriKeywords
      parameters:
      - name: projectIri
        in: path
        description: The IRI of a project. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/projects/0001
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectKeywordsGetResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/GravsearchException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
  /admin/projects/shortcode/{projectShortcode}/erase:
    delete:
      tags:
      - Admin Projects
      description: |-
        !ATTENTION! Erase a project with the given shortcode.
        This will permanently and irrecoverably remove the project and all of its assets.
        Authorization: Requires system admin permissions.
        Only available if the feature has been configured on the server side.
      operationId: deleteAdminProjectsShortcodeProjectshortcodeErase
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMFZWG2BOON3WS43THI2DIMY9
        in: cookie
        required: false
        schema:
          type: string
      - name: projectShortcode
        in: path
        description: The shortcode of a project. Must be a 4 digit hexadecimal String.
        required: true
        schema:
          type: string
        example: '0001'
      - name: keepAssets
        in: query
        description: If set to true the assets in ingest will not be removed.
        required: false
        schema:
          default: false
          type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectOperationResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/GravsearchException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/projects/iri/{projectIri}/AllData:
    get:
      tags:
      - Admin Projects
      description: Returns all ontologies, data, and configuration belonging to a
        project identified by the IRI.
      operationId: getAdminProjectsIriProjectiriAlldata
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMFZWG2BOON3WS43THI2DIMY9
        in: cookie
        required: false
        schema:
          type: string
      - name: projectIri
        in: path
        description: The IRI of a project. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/projects/0001
      responses:
        '200':
          description: ''
          headers:
            Content-Disposition:
              required: true
              schema:
                type: string
            Content-Type:
              required: true
              schema:
                type: string
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/GravsearchException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/projects/iri/{projectIri}/admin-members:
    get:
      tags:
      - Admin Projects
      operationId: getAdminProjectsIriProjectiriAdmin-members
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMFZWG2BOON3WS43THI2DIMY9
        in: cookie
        required: false
        schema:
          type: string
      - name: projectIri
        in: path
        description: The IRI of a project. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/projects/0001
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectAdminMembersGetResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/GravsearchException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/projects/iri/{projectIri}/members:
    get:
      tags:
      - Admin Projects
      description: Returns all project members of a project identified by the IRI.
      operationId: getAdminProjectsIriProjectiriMembers
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMFZWG2BOON3WS43THI2DIMY9
        in: cookie
        required: false
        schema:
          type: string
      - name: projectIri
        in: path
        description: The IRI of a project. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/projects/0001
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectMembersGetResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/GravsearchException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/projects/shortcode/{projectShortcode}/admin-members:
    get:
      tags:
      - Admin Projects
      description: Returns all admin members of a project identified by the shortcode.
      operationId: getAdminProjectsShortcodeProjectshortcodeAdmin-members
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMFZWG2BOON3WS43THI2DIMY9
        in: cookie
        required: false
        schema:
          type: string
      - name: projectShortcode
        in: path
        description: The shortcode of a project. Must be a 4 digit hexadecimal String.
        required: true
        schema:
          type: string
        example: '0001'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectAdminMembersGetResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/GravsearchException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/projects/shortcode/{projectShortcode}/members:
    get:
      tags:
      - Admin Projects
      description: Returns all project members of a project identified by the shortcode.
      operationId: getAdminProjectsShortcodeProjectshortcodeMembers
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMFZWG2BOON3WS43THI2DIMY9
        in: cookie
        required: false
        schema:
          type: string
      - name: projectShortcode
        in: path
        description: The shortcode of a project. Must be a 4 digit hexadecimal String.
        required: true
        schema:
          type: string
        example: '0001'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectMembersGetResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/GravsearchException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/projects/shortname/{projectShortname}/admin-members:
    get:
      tags:
      - Admin Projects
      description: Returns all admin members of a project identified by the shortname.
      operationId: getAdminProjectsShortnameProjectshortnameAdmin-members
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMFZWG2BOON3WS43THI2DIMY9
        in: cookie
        required: false
        schema:
          type: string
      - name: projectShortname
        in: path
        description: The shortname of a project.
        required: true
        schema:
          type: string
        example: someShortname
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectAdminMembersGetResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/GravsearchException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/projects/shortname/{projectShortname}/members:
    get:
      tags:
      - Admin Projects
      description: Returns all project members of a project identified by the shortname.
      operationId: getAdminProjectsShortnameProjectshortnameMembers
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMFZWG2BOON3WS43THI2DIMY9
        in: cookie
        required: false
        schema:
          type: string
      - name: projectShortname
        in: path
        description: The shortname of a project.
        required: true
        schema:
          type: string
        example: someShortname
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectMembersGetResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/GravsearchException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/projects/export:
    get:
      tags:
      - Admin Projects
      description: Lists existing exports of all projects.
      operationId: getAdminProjectsExport
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMFZWG2BOON3WS43THI2DIMY9
        in: cookie
        required: false
        schema:
          type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectExportInfoResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/GravsearchException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/projects/shortcode/{projectShortcode}/export:
    post:
      tags:
      - Admin Projects
      description: Trigger an export of a project identified by the shortcode.
      operationId: postAdminProjectsShortcodeProjectshortcodeExport
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMFZWG2BOON3WS43THI2DIMY9
        in: cookie
        required: false
        schema:
          type: string
      - name: projectShortcode
        in: path
        description: The shortcode of a project. Must be a 4 digit hexadecimal String.
        required: true
        schema:
          type: string
        example: '0001'
      responses:
        '202':
          description: ''
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/GravsearchException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/projects/shortcode/{projectShortcode}/export-await:
    post:
      tags:
      - Admin Projects
      description: Trigger an export of a project identified by the shortcode.Returns
        the shortcode and the export location when the process has finished successfully.
      operationId: postAdminProjectsShortcodeProjectshortcodeExport-await
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMFZWG2BOON3WS43THI2DIMY9
        in: cookie
        required: false
        schema:
          type: string
      - name: projectShortcode
        in: path
        description: The shortcode of a project. Must be a 4 digit hexadecimal String.
        required: true
        schema:
          type: string
        example: '0001'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectExportInfoResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/GravsearchException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/projects/shortcode/{projectShortcode}/import:
    post:
      tags:
      - Admin Projects
      description: Trigger an import of a project identified by the shortcode.
      operationId: postAdminProjectsShortcodeProjectshortcodeImport
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMFZWG2BOON3WS43THI2DIMY9
        in: cookie
        required: false
        schema:
          type: string
      - name: projectShortcode
        in: path
        description: The shortcode of a project. Must be a 4 digit hexadecimal String.
        required: true
        schema:
          type: string
        example: '0001'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectImportResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/GravsearchException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/store/ResetTriplestoreContent:
    get:
      tags:
      - Admin Store
      description: Resets the content of the triplestore, only available if configuration
        `allowReloadOverHttp` is set to `true`.
      operationId: getAdminStoreResettriplestorecontent
      parameters:
      - name: prependDefaults
        in: query
        description: Prepend defaults to the data objects.
        required: false
        schema:
          default: true
          type: boolean
      requestBody:
        description: RDF data objects to load into the triplestore, uses defaults
          if not present.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/RdfDataObject'
        required: false
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/GravsearchException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
  /admin/users/iri/{userIri}/project-memberships:
    get:
      tags:
      - Admin Users
      description: Returns the user's project memberships for a user identified by
        their IRI.
      operationId: getAdminUsersIriUseririProject-memberships
      parameters:
      - name: userIri
        in: path
        description: The user IRI. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/users/0z3QJfOPQ3qUM9zK6vzQOg
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProjectMembershipsGetResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/GravsearchException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
  /admin/users/iri/{userIri}/project-admin-memberships:
    get:
      tags:
      - Admin Users
      description: Returns the user's project admin memberships for a user identified
        by their IRI.
      operationId: getAdminUsersIriUseririProject-admin-memberships
      parameters:
      - name: userIri
        in: path
        description: The user IRI. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/users/0z3QJfOPQ3qUM9zK6vzQOg
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProjectAdminMembershipsGetResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/GravsearchException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
  /admin/users/iri/{userIri}/group-memberships:
    get:
      tags:
      - Admin Users
      description: Returns the user's group memberships for a user identified by their
        IRI.
      operationId: getAdminUsersIriUseririGroup-memberships
      parameters:
      - name: userIri
        in: path
        description: The user IRI. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/users/0z3QJfOPQ3qUM9zK6vzQOg
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGroupMembershipsGetResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/GravsearchException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
  /admin/users:
    get:
      tags:
      - Admin Users
      description: Returns all users.
      operationId: getAdminUsers
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMFZWG2BOON3WS43THI2DIMY9
        in: cookie
        required: false
        schema:
          type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersGetResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/GravsearchException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
    post:
      tags:
      - Admin Users
      description: Create a new user.
      operationId: postAdminUsers
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMFZWG2BOON3WS43THI2DIMY9
        in: cookie
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/GravsearchException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/users/iri/{userIri}:
    get:
      tags:
      - Admin Users
      description: Returns a user identified by their IRI.
      operationId: getAdminUsersIriUseriri
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMFZWG2BOON3WS43THI2DIMY9
        in: cookie
        required: false
        schema:
          type: string
      - name: userIri
        in: path
        description: The user IRI. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/users/0z3QJfOPQ3qUM9zK6vzQOg
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/GravsearchException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
    delete:
      tags:
      - Admin Users
      description: Delete a user identified by IRI (change status to false).
      operationId: deleteAdminUsersIriUseriri
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMFZWG2BOON3WS43THI2DIMY9
        in: cookie
        required: false
        schema:
          type: string
      - name: userIri
        in: path
        description: The user IRI. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/users/0z3QJfOPQ3qUM9zK6vzQOg
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/GravsearchException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/users/email/{email}:
    get:
      tags:
      - Admin Users
      description: Returns a user identified by their Email.
      operationId: getAdminUsersEmailEmail
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMFZWG2BOON3WS43THI2DIMY9
        in: cookie
        required: false
        schema:
          type: string
      - name: email
        in: path
        description: The user email. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: jane@example.com
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/GravsearchException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/users/username/{username}:
    get:
      tags:
      - Admin Users
      description: Returns a user identified by their Username.
      operationId: getAdminUsersUsernameUsername
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMFZWG2BOON3WS43THI2DIMY9
        in: cookie
        required: false
        schema:
          type: string
      - name: username
        in: path
        description: The user name. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: JaneDoe
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/GravsearchException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/users/iri/{userIri}/project-memberships/{projectIri}:
    post:
      tags:
      - Admin Users
      description: Add a user to a project identified by IRI.
      operationId: postAdminUsersIriUseririProject-membershipsProjectiri
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMFZWG2BOON3WS43THI2DIMY9
        in: cookie
        required: false
        schema:
          type: string
      - name: userIri
        in: path
        description: The user IRI. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/users/0z3QJfOPQ3qUM9zK6vzQOg
      - name: projectIri
        in: path
        description: The IRI of a project. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/projects/0001
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/GravsearchException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
    delete:
      tags:
      - Admin Users
      description: Remove a user from a project membership identified by IRI.
      operationId: deleteAdminUsersIriUseririProject-membershipsProjectiri
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMFZWG2BOON3WS43THI2DIMY9
        in: cookie
        required: false
        schema:
          type: string
      - name: userIri
        in: path
        description: The user IRI. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/users/0z3QJfOPQ3qUM9zK6vzQOg
      - name: projectIri
        in: path
        description: The IRI of a project. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/projects/0001
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/GravsearchException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/users/iri/{userIri}/project-admin-memberships/{projectIri}:
    post:
      tags:
      - Admin Users
      description: Add a user as an admin to a project identified by IRI.
      operationId: postAdminUsersIriUseririProject-admin-membershipsProjectiri
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMFZWG2BOON3WS43THI2DIMY9
        in: cookie
        required: false
        schema:
          type: string
      - name: userIri
        in: path
        description: The user IRI. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/users/0z3QJfOPQ3qUM9zK6vzQOg
      - name: projectIri
        in: path
        description: The IRI of a project. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/projects/0001
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/GravsearchException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
    delete:
      tags:
      - Admin Users
      description: Remove a user form an admin project membership identified by IRI.
      operationId: deleteAdminUsersIriUseririProject-admin-membershipsProjectiri
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMFZWG2BOON3WS43THI2DIMY9
        in: cookie
        required: false
        schema:
          type: string
      - name: userIri
        in: path
        description: The user IRI. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/users/0z3QJfOPQ3qUM9zK6vzQOg
      - name: projectIri
        in: path
        description: The IRI of a project. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/projects/0001
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/GravsearchException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/users/iri/{userIri}/group-memberships/{groupIri}:
    post:
      tags:
      - Admin Users
      description: Add a user to a group identified by IRI.
      operationId: postAdminUsersIriUseririGroup-membershipsGroupiri
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMFZWG2BOON3WS43THI2DIMY9
        in: cookie
        required: false
        schema:
          type: string
      - name: userIri
        in: path
        description: The user IRI. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/users/0z3QJfOPQ3qUM9zK6vzQOg
      - name: groupIri
        in: path
        description: The IRI of a group. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/groups/0042/a95UWs71KUklnFOe1rcw1w
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/GravsearchException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
    delete:
      tags:
      - Admin Users
      description: Remove a user form an group membership identified by IRI.
      operationId: deleteAdminUsersIriUseririGroup-membershipsGroupiri
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMFZWG2BOON3WS43THI2DIMY9
        in: cookie
        required: false
        schema:
          type: string
      - name: userIri
        in: path
        description: The user IRI. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/users/0z3QJfOPQ3qUM9zK6vzQOg
      - name: groupIri
        in: path
        description: The IRI of a group. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/groups/0042/a95UWs71KUklnFOe1rcw1w
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/GravsearchException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/users/iri/{userIri}/BasicUserInformation:
    put:
      tags:
      - Admin Users
      description: Update a user's basic information identified by IRI.
      operationId: putAdminUsersIriUseririBasicuserinformation
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMFZWG2BOON3WS43THI2DIMY9
        in: cookie
        required: false
        schema:
          type: string
      - name: userIri
        in: path
        description: The user IRI. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/users/0z3QJfOPQ3qUM9zK6vzQOg
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BasicUserInformationChangeRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/GravsearchException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/users/iri/{userIri}/Password:
    put:
      tags:
      - Admin Users
      description: Change a user's password identified by IRI.
      operationId: putAdminUsersIriUseririPassword
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMFZWG2BOON3WS43THI2DIMY9
        in: cookie
        required: false
        schema:
          type: string
      - name: userIri
        in: path
        description: The user IRI. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/users/0z3QJfOPQ3qUM9zK6vzQOg
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordChangeRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/GravsearchException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/users/iri/{userIri}/Status:
    put:
      tags:
      - Admin Users
      description: Change a user's status identified by IRI.
      operationId: putAdminUsersIriUseririStatus
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMFZWG2BOON3WS43THI2DIMY9
        in: cookie
        required: false
        schema:
          type: string
      - name: userIri
        in: path
        description: The user IRI. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/users/0z3QJfOPQ3qUM9zK6vzQOg
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StatusChangeRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/GravsearchException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/users/iri/{userIri}/SystemAdmin:
    put:
      tags:
      - Admin Users
      description: Change a user's SystemAdmin status identified by IRI.
      operationId: putAdminUsersIriUseririSystemadmin
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMFZWG2BOON3WS43THI2DIMY9
        in: cookie
        required: false
        schema:
          type: string
      - name: userIri
        in: path
        description: The user IRI. Must be URL-encoded.
        required: true
        schema:
          type: string
        example: http://rdfh.ch/users/0z3QJfOPQ3qUM9zK6vzQOg
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SystemAdminChangeRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseADM'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/GravsearchException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
  /admin/files/{projectShortcode}/{filename}:
    get:
      tags:
      - Admin Files
      description: Returns the permission code and the project's restricted view settings
        for a given shortcode and filename.
      operationId: getAdminFilesProjectshortcodeFilename
      parameters:
      - name: KnoraAuthenticationMFYGSLTEMFZWG2BOON3WS43THI2DIMY9
        in: cookie
        required: false
        schema:
          type: string
      - name: projectShortcode
        in: path
        description: The shortcode of a project. Must be a 4 digit hexadecimal String.
        required: true
        schema:
          type: string
        example: '0001'
      - name: filename
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PermissionCodeAndProjectRestrictedViewSettings'
        '400':
          description: ''
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/BadRequestException'
                - $ref: '#/components/schemas/ValidationException'
                - $ref: '#/components/schemas/DuplicateValueException'
                - $ref: '#/components/schemas/GravsearchException'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadCredentialsException'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
      security:
      - httpAuth: []
      - httpAuth1: []
components:
  schemas:
    Active:
      title: Active
      type: object
    AdministrativePermissionADM:
      title: AdministrativePermissionADM
      type: object
      required:
      - iri
      - forProject
      - forGroup
      properties:
        iri:
          type: string
        forProject:
          type: string
        forGroup:
          type: string
        hasPermissions:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/PermissionADM'
    AdministrativePermissionCreateResponseADM:
      title: AdministrativePermissionCreateResponseADM
      type: object
      required:
      - administrativePermission
      properties:
        administrativePermission:
          $ref: '#/components/schemas/AdministrativePermissionADM'
    AdministrativePermissionGetResponseADM:
      title: AdministrativePermissionGetResponseADM
      type: object
      required:
      - administrativePermission
      properties:
        administrativePermission:
          $ref: '#/components/schemas/AdministrativePermissionADM'
    AdministrativePermissionsForProjectGetResponseADM:
      title: AdministrativePermissionsForProjectGetResponseADM
      type: object
      properties:
        administrativePermissions:
          type: array
          items:
            $ref: '#/components/schemas/AdministrativePermissionADM'
    BadCredentialsException:
      title: BadCredentialsException
      type: object
      required:
      - message
      properties:
        message:
          type: string
    BadRequestException:
      title: BadRequestException
      type: object
      required:
      - message
      properties:
        message:
          type: string
    BasicUserInformationChangeRequest:
      title: BasicUserInformationChangeRequest
      type: object
      properties:
        username:
          $ref: '#/components/schemas/Username'
        email:
          $ref: '#/components/schemas/Email'
        givenName:
          $ref: '#/components/schemas/GivenName'
        familyName:
          $ref: '#/components/schemas/FamilyName'
        lang:
          $ref: '#/components/schemas/LanguageCode'
    CanDeleteListResponseADM:
      title: CanDeleteListResponseADM
      type: object
      required:
      - listIri
      - canDeleteList
      properties:
        listIri:
          type: string
        canDeleteList:
          type: boolean
    CanJoin:
      title: CanJoin
      type: object
    CannotJoin:
      title: CannotJoin
      type: object
    ChangePermissionGroupApiRequestADM:
      title: ChangePermissionGroupApiRequestADM
      type: object
      required:
      - forGroup
      properties:
        forGroup:
          type: string
    ChangePermissionHasPermissionsApiRequestADM:
      title: ChangePermissionHasPermissionsApiRequestADM
      type: object
      properties:
        hasPermissions:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/PermissionADM'
    ChangePermissionPropertyApiRequestADM:
      title: ChangePermissionPropertyApiRequestADM
      type: object
      required:
      - forProperty
      properties:
        forProperty:
          type: string
    ChangePermissionResourceClassApiRequestADM:
      title: ChangePermissionResourceClassApiRequestADM
      type: object
      required:
      - forResourceClass
      properties:
        forResourceClass:
          type: string
    ChildNodeDeleteResponseADM:
      title: ChildNodeDeleteResponseADM
      type: object
      required:
      - node
      properties:
        node:
          $ref: '#/components/schemas/ListNodeADM'
    ChildNodeInfoGetResponseADM:
      title: ChildNodeInfoGetResponseADM
      type: object
      required:
      - nodeinfo
      properties:
        nodeinfo:
          $ref: '#/components/schemas/ListChildNodeInfoADM'
    Comments:
      title: Comments
      type: object
      properties:
        value:
          type: array
          items:
            $ref: '#/components/schemas/StringLiteralV2'
    CreateAdministrativePermissionAPIRequestADM:
      title: CreateAdministrativePermissionAPIRequestADM
      type: object
      required:
      - forProject
      - forGroup
      properties:
        id:
          type: string
        forProject:
          type: string
        forGroup:
          type: string
        hasPermissions:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/PermissionADM'
    CreateDefaultObjectAccessPermissionAPIRequestADM:
      title: CreateDefaultObjectAccessPermissionAPIRequestADM
      type: object
      required:
      - forProject
      properties:
        id:
          type: string
        forProject:
          type: string
        forGroup:
          type: string
        forResourceClass:
          type: string
        forProperty:
          type: string
        hasPermissions:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/PermissionADM'
    DefaultObjectAccessPermissionADM:
      title: DefaultObjectAccessPermissionADM
      type: object
      required:
      - iri
      - forProject
      properties:
        iri:
          type: string
        forProject:
          type: string
        forGroup:
          type: string
        forResourceClass:
          type: string
        forProperty:
          type: string
        hasPermissions:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/PermissionADM'
    DefaultObjectAccessPermissionCreateResponseADM:
      title: DefaultObjectAccessPermissionCreateResponseADM
      type: object
      required:
      - defaultObjectAccessPermission
      properties:
        defaultObjectAccessPermission:
          $ref: '#/components/schemas/DefaultObjectAccessPermissionADM'
    DefaultObjectAccessPermissionGetResponseADM:
      title: DefaultObjectAccessPermissionGetResponseADM
      type: object
      required:
      - defaultObjectAccessPermission
      properties:
        defaultObjectAccessPermission:
          $ref: '#/components/schemas/DefaultObjectAccessPermissionADM'
    DefaultObjectAccessPermissionsForProjectGetResponseADM:
      title: DefaultObjectAccessPermissionsForProjectGetResponseADM
      type: object
      properties:
        defaultObjectAccessPermissions:
          type: array
          items:
            $ref: '#/components/schemas/DefaultObjectAccessPermissionADM'
    Description:
      title: Description
      type: object
      required:
      - value
      properties:
        value:
          $ref: '#/components/schemas/StringLiteralV2'
    DuplicateValueException:
      title: DuplicateValueException
      type: object
      required:
      - message
      properties:
        message:
          type: string
    Email:
      title: Email
      type: object
      required:
      - value
      properties:
        value:
          type: string
    FamilyName:
      title: FamilyName
      type: object
      required:
      - value
      properties:
        value:
          type: string
    ForbiddenException:
      title: ForbiddenException
      type: object
      required:
      - message
      properties:
        message:
          type: string
    GivenName:
      title: GivenName
      type: object
      required:
      - value
      properties:
        value:
          type: string
    GravsearchException:
      title: GravsearchException
      type: object
      required:
      - message
      properties:
        message:
          type: string
    Group:
      title: Group
      type: object
      required:
      - id
      - name
      - status
      - selfjoin
      properties:
        id:
          type: string
        name:
          type: string
        descriptions:
          type: array
          items:
            $ref: '#/components/schemas/StringLiteralV2'
        project:
          $ref: '#/components/schemas/Project'
        status:
          type: boolean
        selfjoin:
          type: boolean
    GroupCreateRequest:
      title: GroupCreateRequest
      type: object
      required:
      - name
      - descriptions
      - project
      - status
      - selfjoin
      properties:
        id:
          $ref: '#/components/schemas/GroupIri'
        name:
          $ref: '#/components/schemas/GroupName'
        descriptions:
          $ref: '#/components/schemas/GroupDescriptions'
        project:
          $ref: '#/components/schemas/ProjectIri'
        status:
          $ref: '#/components/schemas/GroupStatus'
        selfjoin:
          $ref: '#/components/schemas/GroupSelfJoin'
    GroupDescriptions:
      title: GroupDescriptions
      type: object
      properties:
        value:
          type: array
          items:
            $ref: '#/components/schemas/StringLiteralV2'
    GroupGetResponseADM:
      title: GroupGetResponseADM
      type: object
      required:
      - group
      properties:
        group:
          $ref: '#/components/schemas/Group'
    GroupIri:
      title: GroupIri
      type: object
      required:
      - value
      properties:
        value:
          type: string
    GroupMembersGetResponseADM:
      title: GroupMembersGetResponseADM
      type: object
      properties:
        members:
          type: array
          items:
            $ref: '#/components/schemas/User'
    GroupName:
      title: GroupName
      type: object
      required:
      - value
      properties:
        value:
          type: string
    GroupSelfJoin:
      title: GroupSelfJoin
      type: object
      required:
      - value
      properties:
        value:
          type: boolean
    GroupStatus:
      title: GroupStatus
      type: object
      required:
      - value
      properties:
        value:
          type: boolean
    GroupStatusUpdateRequest:
      title: GroupStatusUpdateRequest
      type: object
      required:
      - status
      properties:
        status:
          $ref: '#/components/schemas/GroupStatus'
    GroupUpdateRequest:
      title: GroupUpdateRequest
      type: object
      properties:
        name:
          $ref: '#/components/schemas/GroupName'
        descriptions:
          $ref: '#/components/schemas/GroupDescriptions'
        status:
          $ref: '#/components/schemas/GroupStatus'
        selfjoin:
          $ref: '#/components/schemas/GroupSelfJoin'
    GroupsGetResponseADM:
      title: GroupsGetResponseADM
      type: object
      properties:
        groups:
          type: array
          items:
            $ref: '#/components/schemas/Group'
    Inactive:
      title: Inactive
      type: object
    Keyword:
      title: Keyword
      type: object
      required:
      - value
      properties:
        value:
          type: string
    Labels:
      title: Labels
      type: object
      properties:
        value:
          type: array
          items:
            $ref: '#/components/schemas/StringLiteralV2'
    LanguageCode:
      title: LanguageCode
      type: object
      required:
      - value
      properties:
        value:
          type: string
    ListADM:
      title: ListADM
      type: object
      required:
      - listinfo
      properties:
        listinfo:
          $ref: '#/components/schemas/ListRootNodeInfoADM'
        children:
          type: array
          items:
            $ref: '#/components/schemas/ListChildNodeADM'
    ListChangeCommentsRequest:
      title: ListChangeCommentsRequest
      type: object
      required:
      - comments
      properties:
        comments:
          $ref: '#/components/schemas/Comments'
    ListChangeLabelsRequest:
      title: ListChangeLabelsRequest
      type: object
      required:
      - labels
      properties:
        labels:
          $ref: '#/components/schemas/Labels'
    ListChangeNameRequest:
      title: ListChangeNameRequest
      type: object
      required:
      - name
      properties:
        name:
          $ref: '#/components/schemas/ListName'
    ListChangePositionRequest:
      title: ListChangePositionRequest
      type: object
      required:
      - position
      - parentNodeIri
      properties:
        position:
          $ref: '#/components/schemas/Position'
        parentNodeIri:
          $ref: '#/components/schemas/ListIri'
    ListChangeRequest:
      title: ListChangeRequest
      type: object
      required:
      - listIri
      - projectIri
      properties:
        listIri:
          $ref: '#/components/schemas/ListIri'
        projectIri:
          $ref: '#/components/schemas/ProjectIri'
        hasRootNode:
          $ref: '#/components/schemas/ListIri'
        position:
          $ref: '#/components/schemas/Position'
        name:
          $ref: '#/components/schemas/ListName'
        labels:
          $ref: '#/components/schemas/Labels'
        comments:
          $ref: '#/components/schemas/Comments'
    ListChildNodeADM:
      title: ListChildNodeADM
      type: object
      required:
      - id
      - labels
      - comments
      - position
      - hasRootNode
      properties:
        id:
          type: string
        name:
          type: string
        labels:
          $ref: '#/components/schemas/StringLiteralSequenceV2'
        comments:
          $ref: '#/components/schemas/StringLiteralSequenceV2'
        position:
          type: integer
          format: int32
        hasRootNode:
          type: string
        children:
          type: array
          items:
            $ref: '#/components/schemas/ListChildNodeADM'
    ListChildNodeInfoADM:
      title: ListChildNodeInfoADM
      type: object
      required:
      - id
      - labels
      - comments
      - position
      - hasRootNode
      properties:
        id:
          type: string
        name:
          type: string
        labels:
          $ref: '#/components/schemas/StringLiteralSequenceV2'
        comments:
          $ref: '#/components/schemas/StringLiteralSequenceV2'
        position:
          type: integer
          format: int32
        hasRootNode:
          type: string
    ListCreateRootNodeRequest:
      title: ListCreateRootNodeRequest
      type: object
      required:
      - comments
      - labels
      - projectIri
      properties:
        id:
          $ref: '#/components/schemas/ListIri'
        comments:
          $ref: '#/components/schemas/Comments'
        labels:
          $ref: '#/components/schemas/Labels'
        name:
          $ref: '#/components/schemas/ListName'
        projectIri:
          $ref: '#/components/schemas/ProjectIri'
    ListDeleteResponseADM:
      title: ListDeleteResponseADM
      type: object
      required:
      - iri
      - deleted
      properties:
        iri:
          type: string
        deleted:
          type: boolean
    ListGetResponseADM:
      title: ListGetResponseADM
      type: object
      required:
      - list
      properties:
        list:
          $ref: '#/components/schemas/ListADM'
    ListIri:
      title: ListIri
      type: object
      required:
      - value
      properties:
        value:
          type: string
    ListItemDeleteResponseADM:
      title: ListItemDeleteResponseADM
      oneOf:
      - $ref: '#/components/schemas/ChildNodeDeleteResponseADM'
      - $ref: '#/components/schemas/ListDeleteResponseADM'
    ListItemGetResponseADM:
      title: ListItemGetResponseADM
      oneOf:
      - $ref: '#/components/schemas/ListGetResponseADM'
      - $ref: '#/components/schemas/ListNodeGetResponseADM'
    ListName:
      title: ListName
      type: object
      required:
      - value
      properties:
        value:
          type: string
    ListNodeADM:
      title: ListNodeADM
      oneOf:
      - $ref: '#/components/schemas/ListChildNodeADM'
      - $ref: '#/components/schemas/ListRootNodeADM'
    ListNodeCommentsDeleteResponseADM:
      title: ListNodeCommentsDeleteResponseADM
      type: object
      required:
      - nodeIri
      - commentsDeleted
      properties:
        nodeIri:
          type: string
        commentsDeleted:
          type: boolean
    ListNodeGetResponseADM:
      title: ListNodeGetResponseADM
      type: object
      required:
      - node
      properties:
        node:
          $ref: '#/components/schemas/NodeADM'
    ListRootNodeADM:
      title: ListRootNodeADM
      type: object
      required:
      - id
      - projectIri
      - labels
      - comments
      - isRootNode
      properties:
        id:
          type: string
        projectIri:
          type: string
        name:
          type: string
        labels:
          $ref: '#/components/schemas/StringLiteralSequenceV2'
        comments:
          $ref: '#/components/schemas/StringLiteralSequenceV2'
        children:
          type: array
          items:
            $ref: '#/components/schemas/ListChildNodeADM'
        isRootNode:
          type: boolean
    ListRootNodeInfoADM:
      title: ListRootNodeInfoADM
      type: object
      required:
      - id
      - projectIri
      - labels
      - comments
      - isRootNode
      properties:
        id:
          type: string
        projectIri:
          type: string
        name:
          type: string
        labels:
          $ref: '#/components/schemas/StringLiteralSequenceV2'
        comments:
          $ref: '#/components/schemas/StringLiteralSequenceV2'
        isRootNode:
          type: boolean
    ListsGetResponseADM:
      title: ListsGetResponseADM
      type: object
      properties:
        lists:
          type: array
          items:
            $ref: '#/components/schemas/ListRootNodeInfoADM'
    Logo:
      title: Logo
      type: object
      required:
      - value
      properties:
        value:
          type: string
    Longname:
      title: Longname
      type: object
      required:
      - value
      properties:
        value:
          type: string
    Map_Seq_IRI:
      title: Map_Seq_IRI
      type: object
      additionalProperties:
        type: array
        items:
          type: string
    Map_Set_PermissionADM:
      title: Map_Set_PermissionADM
      type: object
      additionalProperties:
        type: array
        uniqueItems: true
        items:
          $ref: '#/components/schemas/PermissionADM'
    MessageResponse:
      title: MessageResponse
      type: object
      required:
      - message
      properties:
        message:
          type: string
    NodeADM:
      title: NodeADM
      type: object
      required:
      - nodeinfo
      properties:
        nodeinfo:
          $ref: '#/components/schemas/ListChildNodeInfoADM'
        children:
          type: array
          items:
            $ref: '#/components/schemas/ListChildNodeADM'
    NodeInfoGetResponseADM:
      title: NodeInfoGetResponseADM
      oneOf:
      - $ref: '#/components/schemas/ChildNodeInfoGetResponseADM'
      - $ref: '#/components/schemas/RootNodeInfoGetResponseADM'
    NodePositionChangeResponseADM:
      title: NodePositionChangeResponseADM
      type: object
      required:
      - node
      properties:
        node:
          $ref: '#/components/schemas/ListNodeADM'
    NotFoundException:
      title: NotFoundException
      type: object
      required:
      - message
      properties:
        message:
          type: string
    Password:
      title: Password
      type: object
      required:
      - value
      properties:
        value:
          type: string
    PasswordChangeRequest:
      title: PasswordChangeRequest
      type: object
      required:
      - requesterPassword
      - newPassword
      properties:
        requesterPassword:
          $ref: '#/components/schemas/Password'
        newPassword:
          $ref: '#/components/schemas/Password'
    PermissionADM:
      title: PermissionADM
      type: object
      required:
      - name
      properties:
        name:
          type: string
        additionalInformation:
          type: string
        permissionCode:
          type: integer
          format: int32
    PermissionCodeAndProjectRestrictedViewSettings:
      title: PermissionCodeAndProjectRestrictedViewSettings
      type: object
      required:
      - permissionCode
      properties:
        permissionCode:
          type: integer
          format: int32
        restrictedViewSettings:
          $ref: '#/components/schemas/ProjectRestrictedViewSettingsADM'
    PermissionDeleteResponseADM:
      title: PermissionDeleteResponseADM
      type: object
      required:
      - permissionIri
      - deleted
      properties:
        permissionIri:
          type: string
        deleted:
          type: boolean
    PermissionGetResponseADM:
      title: PermissionGetResponseADM
      oneOf:
      - $ref: '#/components/schemas/AdministrativePermissionGetResponseADM'
      - $ref: '#/components/schemas/DefaultObjectAccessPermissionGetResponseADM'
    PermissionInfoADM:
      title: PermissionInfoADM
      type: object
      required:
      - iri
      - permissionType
      properties:
        iri:
          type: string
        permissionType:
          type: string
    PermissionsDataADM:
      title: PermissionsDataADM
      type: object
      required:
      - groupsPerProject
      - administrativePermissionsPerProject
      properties:
        groupsPerProject:
          $ref: '#/components/schemas/Map_Seq_IRI'
        administrativePermissionsPerProject:
          $ref: '#/components/schemas/Map_Set_PermissionADM'
    PermissionsForProjectGetResponseADM:
      title: PermissionsForProjectGetResponseADM
      type: object
      properties:
        permissions:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/PermissionInfoADM'
    Position:
      title: Position
      type: object
      required:
      - value
      properties:
        value:
          type: integer
          format: int32
    Project:
      title: Project
      type: object
      required:
      - id
      - shortname
      - shortcode
      - status
      - selfjoin
      properties:
        id:
          type: string
        shortname:
          type: string
        shortcode:
          type: string
        longname:
          type: string
        description:
          type: array
          items:
            $ref: '#/components/schemas/StringLiteralV2'
        keywords:
          type: array
          items:
            type: string
        logo:
          type: string
        ontologies:
          type: array
          items:
            type: string
        status:
          type: boolean
        selfjoin:
          type: boolean
    ProjectAdminMembersGetResponseADM:
      title: ProjectAdminMembersGetResponseADM
      type: object
      properties:
        members:
          type: array
          items:
            $ref: '#/components/schemas/User'
    ProjectCreateRequest:
      title: ProjectCreateRequest
      type: object
      required:
      - shortname
      - shortcode
      - status
      - selfjoin
      properties:
        id:
          $ref: '#/components/schemas/ProjectIri'
        shortname:
          $ref: '#/components/schemas/Shortname'
        shortcode:
          $ref: '#/components/schemas/Shortcode'
        longname:
          $ref: '#/components/schemas/Longname'
        description:
          type: array
          items:
            $ref: '#/components/schemas/Description'
        keywords:
          type: array
          items:
            $ref: '#/components/schemas/Keyword'
        logo:
          $ref: '#/components/schemas/Logo'
        status:
          $ref: '#/components/schemas/Status'
        selfjoin:
          $ref: '#/components/schemas/SelfJoin'
    ProjectExportInfoResponse:
      title: ProjectExportInfoResponse
      type: object
      required:
      - projectShortcode
      - location
      properties:
        projectShortcode:
          type: string
        location:
          type: string
    ProjectGetResponse:
      title: ProjectGetResponse
      type: object
      required:
      - project
      properties:
        project:
          $ref: '#/components/schemas/Project'
    ProjectImportResponse:
      title: ProjectImportResponse
      type: object
      required:
      - location
      properties:
        location:
          type: string
    ProjectIri:
      title: ProjectIri
      type: object
      required:
      - value
      properties:
        value:
          type: string
    ProjectKeywordsGetResponse:
      title: ProjectKeywordsGetResponse
      type: object
      properties:
        keywords:
          type: array
          items:
            type: string
    ProjectMembersGetResponseADM:
      title: ProjectMembersGetResponseADM
      type: object
      properties:
        members:
          type: array
          items:
            $ref: '#/components/schemas/User'
    ProjectOperationResponseADM:
      title: ProjectOperationResponseADM
      type: object
      required:
      - project
      properties:
        project:
          $ref: '#/components/schemas/Project'
    ProjectRestrictedViewSettingsADM:
      title: ProjectRestrictedViewSettingsADM
      type: object
      required:
      - watermark
      properties:
        size:
          type: string
        watermark:
          type: boolean
    ProjectRestrictedViewSettingsGetResponseADM:
      title: ProjectRestrictedViewSettingsGetResponseADM
      type: object
      required:
      - settings
      properties:
        settings:
          $ref: '#/components/schemas/ProjectRestrictedViewSettingsADM'
    ProjectUpdateRequest:
      title: ProjectUpdateRequest
      type: object
      properties:
        shortname:
          $ref: '#/components/schemas/Shortname'
        longname:
          $ref: '#/components/schemas/Longname'
        description:
          type: array
          items:
            $ref: '#/components/schemas/Description'
        keywords:
          type: array
          items:
            $ref: '#/components/schemas/Keyword'
        logo:
          $ref: '#/components/schemas/Logo'
        status:
          $ref: '#/components/schemas/Status'
        selfjoin:
          $ref: '#/components/schemas/SelfJoin'
    ProjectsGetResponse:
      title: ProjectsGetResponse
      type: object
      properties:
        projects:
          type: array
          items:
            $ref: '#/components/schemas/Project'
    ProjectsKeywordsGetResponse:
      title: ProjectsKeywordsGetResponse
      type: object
      properties:
        keywords:
          type: array
          items:
            type: string
    RdfDataObject:
      title: RdfDataObject
      type: object
      required:
      - path
      - name
      properties:
        path:
          type: string
        name:
          type: string
    RestrictedViewResponse:
      title: RestrictedViewResponse
      type: object
      properties:
        size:
          $ref: '#/components/schemas/Size'
        watermark:
          $ref: '#/components/schemas/Watermark'
    RootNodeInfoGetResponseADM:
      title: RootNodeInfoGetResponseADM
      type: object
      required:
      - listinfo
      properties:
        listinfo:
          $ref: '#/components/schemas/ListRootNodeInfoADM'
    SelfJoin:
      title: SelfJoin
      oneOf:
      - $ref: '#/components/schemas/CanJoin'
      - $ref: '#/components/schemas/CannotJoin'
    SetRestrictedViewRequest:
      title: SetRestrictedViewRequest
      type: object
      properties:
        size:
          $ref: '#/components/schemas/Size'
        watermark:
          $ref: '#/components/schemas/Watermark'
    Shortcode:
      title: Shortcode
      type: object
      required:
      - value
      properties:
        value:
          type: string
    Shortname:
      title: Shortname
      type: object
      required:
      - value
      properties:
        value:
          type: string
    Size:
      title: Size
      type: object
      required:
      - value
      properties:
        value:
          type: string
    Status:
      title: Status
      oneOf:
      - $ref: '#/components/schemas/Active'
      - $ref: '#/components/schemas/Inactive'
    StatusChangeRequest:
      title: StatusChangeRequest
      type: object
      required:
      - status
      properties:
        status:
          $ref: '#/components/schemas/UserStatus'
    StringLiteralSequenceV2:
      title: StringLiteralSequenceV2
      type: object
      properties:
        stringLiterals:
          type: array
          items:
            $ref: '#/components/schemas/StringLiteralV2'
    StringLiteralV2:
      title: StringLiteralV2
      type: object
      required:
      - value
      properties:
        value:
          type: string
        language:
          type: string
    SystemAdmin:
      title: SystemAdmin
      type: object
      required:
      - value
      properties:
        value:
          type: boolean
    SystemAdminChangeRequest:
      title: SystemAdminChangeRequest
      type: object
      required:
      - systemAdmin
      properties:
        systemAdmin:
          $ref: '#/components/schemas/SystemAdmin'
    User:
      title: User
      type: object
      required:
      - id
      - username
      - email
      - givenName
      - familyName
      - status
      - lang
      - permissions
      properties:
        id:
          type: string
        username:
          type: string
        email:
          type: string
        givenName:
          type: string
        familyName:
          type: string
        status:
          type: boolean
        lang:
          type: string
        password:
          type: string
        groups:
          type: array
          items:
            $ref: '#/components/schemas/Group'
        projects:
          type: array
          items:
            $ref: '#/components/schemas/Project'
        permissions:
          $ref: '#/components/schemas/PermissionsDataADM'
    UserCreateRequest:
      title: UserCreateRequest
      type: object
      required:
      - username
      - email
      - givenName
      - familyName
      - password
      - status
      - lang
      - systemAdmin
      properties:
        id:
          $ref: '#/components/schemas/UserIri'
        username:
          $ref: '#/components/schemas/Username'
        email:
          $ref: '#/components/schemas/Email'
        givenName:
          $ref: '#/components/schemas/GivenName'
        familyName:
          $ref: '#/components/schemas/FamilyName'
        password:
          $ref: '#/components/schemas/Password'
        status:
          $ref: '#/components/schemas/UserStatus'
        lang:
          $ref: '#/components/schemas/LanguageCode'
        systemAdmin:
          $ref: '#/components/schemas/SystemAdmin'
    UserGroupMembershipsGetResponseADM:
      title: UserGroupMembershipsGetResponseADM
      type: object
      properties:
        groups:
          type: array
          items:
            $ref: '#/components/schemas/Group'
    UserIri:
      title: UserIri
      type: object
      required:
      - value
      properties:
        value:
          type: string
    UserProjectAdminMembershipsGetResponseADM:
      title: UserProjectAdminMembershipsGetResponseADM
      type: object
      properties:
        projects:
          type: array
          items:
            $ref: '#/components/schemas/Project'
    UserProjectMembershipsGetResponseADM:
      title: UserProjectMembershipsGetResponseADM
      type: object
      properties:
        projects:
          type: array
          items:
            $ref: '#/components/schemas/Project'
    UserResponseADM:
      title: UserResponseADM
      type: object
      required:
      - user
      properties:
        user:
          $ref: '#/components/schemas/User'
    UserStatus:
      title: UserStatus
      type: object
      required:
      - value
      properties:
        value:
          type: boolean
    Username:
      title: Username
      type: object
      required:
      - value
      properties:
        value:
          type: string
    UsersGetResponseADM:
      title: UsersGetResponseADM
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
    ValidationException:
      title: ValidationException
      type: object
      required:
      - msg
      properties:
        msg:
          type: string
    Watermark:
      title: Watermark
      type: object
      required:
      - value
      properties:
        value:
          type: boolean
  securitySchemes:
    httpAuth:
      type: http
      scheme: bearer
    httpAuth1:
      type: http
      scheme: basic
